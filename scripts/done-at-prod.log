-- vim: fdm=marker et ts=2 sw=2 list

{{{1 Changed author of ...kajs-sida  @ www.debiki.se

But shouldn't be done in this manner!!! Should add a new PageAction.

select * from dw1_page_actions where paid = 'q98404j8dr';
kaj   login  544

Kajs sida:
select * from dw1_pages where guid = '14pg60hulm';
 sno | tenant |    guid    
-----+--------+------------
 198 | 2      | 14pg60hulm


> select * from dw1_page_actions where paid = '1' and page = '198';
 page | paid | login |          time          | type | relpa |                             text                              | markup | wheere | new_ip 
------+------+-------+------------------------+------+-------+---------------------------------------------------------------+--------+--------+--------
 198  | 1    | 536   | 2012-03-11 09:19:54.43 | Post | 1     | Title                                                        +| dmd0   |        | 
      |      |       |                        |      |       | ============                                                 +|        |        | 
      |      |       |                        |      |       |                                                              +|        |        | 
 ...
(1 row)


> select * from dw1_logins where sno = '544';
 sno | tenant | prev_login | id_type | id_sno | login_ip |       login_time        | logout_ip | logout_time 
-----+--------+------------+---------+--------+----------+-------------------------+-----------+-------------
 544 | 2      |            | Simple  | 297    | ?.?.?.?  | 2012-03-19 16:40:55.003 |           | 

> select * from dw1_ids_simple where sno = '297';
 sno |     name     |         email          | location | website 
-----+--------------+------------------------+----------+---------
 297 | Kaj Lindberg | kaj.lindberg@telia.com | -        | -
(1 row)

\SET AUTOCOMMIT OFF
update dw1_page_actions set login = 544 where paid = '1' and page = '198';
COMMIT


}}}1
-- {{{ 2011-04-16  Splits DW1_PAGE_ACTIONS.PAGE into TENANT and PAGE_ID:
------------------------------------------

---
alter table DW1_PAGE_ACTIONS add TENANT varchar(32);

alter table DW1_PAGE_ACTIONS add PAGE_ID varchar(32);

update DW1_PAGE_ACTIONS a set
  PAGE_ID = (select p.GUID from DW1_PAGES p where p.SNO = a.PAGE),
  TENANT = (select p.TENANT from DW1_PAGES p where p.SNO = a.PAGE);

alter table DW1_PAGE_ACTIONS alter column TENANT set not null;
alter table DW1_PAGE_ACTIONS alter column PAGE_ID set not null;

---
alter table DW1_PAGE_RATINGS add column TENANT varchar(32);
alter table DW1_PAGE_RATINGS add column PAGE_ID varchar(32);
--

update DW1_PAGE_RATINGS r set
   TENANT = (select a.TENANT from DW1_PAGE_ACTIONS a where a.PAGE = r.PAGE and a.PAID = r.PAID),
   PAGE_ID = (select a.PAGE_ID from DW1_PAGE_ACTIONS a where a.PAGE = r.PAGE and a.PAID = r.PAID);

select * from DW1_PAGE_RATINGS limit 200;

alter table DW1_PAGE_RATINGS drop constraint DW1_PRATINGS__P;
alter table DW1_PAGE_RATINGS drop constraint DW1_PRATINGS__R__PACTIONS;
alter table DW1_PAGE_RATINGS add constraint DW1_ARTS__P primary key (TENANT, PAGE_ID, PAID, TAG);

---
 alter table DW1_PAGE_ACTIONS drop constraint DW1_PACTIONS__R__PACTIONS;
 alter table DW1_PAGE_ACTIONS drop constraint DW1_PACTIONS_PAGE_PAID__P;
 alter table DW1_PAGE_ACTIONS add constraint DW1_PGAS_TNT_PGID_ID__P
   primary key (TENANT, PAGE_ID, PAID);
 alter table DW1_PAGE_ACTIONS add constraint DW1_PGAS__R__PGAS
    foreign key (TENANT, PAGE_ID, RELPA) -- no ix: no dels/upds in prnt tbl
                       -- and no joins (loading whole page at once instead)
    references DW1_PAGE_ACTIONS (TENANT, PAGE_ID, PAID) deferrable;
 alter table DW1_PAGE_ACTIONS add constraint DW1_PGAS_TNT_PGID__R__PGPTHS
  foreign key (TENANT, PAGE_ID)
  references DW1_PAGE_PATHS (TENANT, PAGE_ID) deferrable;

---
alter table DW1_PAGE_RATINGS add
  constraint DW1_ARTS__R__PGAS  -- ix primary key
      foreign key (TENANT, PAGE_ID, PAID)
      references DW1_PAGE_ACTIONS(TENANT, PAGE_ID, PAID) deferrable;

alter table DW1_PAGE_RATINGS alter column TENANT set not null;
alter table DW1_PAGE_RATINGS alter column PAGE_ID set not null;

---
alter table DW1_PAGE_ACTIONS alter column PAGE drop not null;
alter table DW1_PAGE_RATINGS alter column PAGE drop not null;

-------------------------------------
------------ done above, @dev, @test, @prod.
-- }}}
{{{1 2011-04-23 Copy email & name to user table

-- done @prod, @dev, skip test:

\set AUTOCOMMIT off
select * from dw1_users;
select tenant, sno, usr, first_name, email from dw1_ids_openid ;
update DW1_USERS u set DISPLAY_NAME = i.FIRST_NAME, EMAIL = i.EMAIL
  from DW1_IDS_OPENID i
  where u.TENANT = i.TENANT and u.SNO = i.USR;
select * from dw1_users;
select oid_realm, tenant, sno, usr, first_name, email from dw1_ids_openid ;
commit;

Result: (DW1_USERS email and display_name were all null before)

debiki_prod=> select * from dw1_users;
 tenant | sno | display_name |         email          | country | website | superadmin | email_notfs 
--------+-----+--------------+------------------------+---------+---------+------------+-------------
 2      | 51  |              |                        |         |         | T          | R
 2      | 10  | Magnus       | leomaheo@gmail.com     |         |         | T          | 
 2      | 30  | KajMagnus    | kajmagnus79d@gmail.com |         |         | T          | N
 2      | 52  | Kaj Magnus   | kajmagnus79@gmail.com  |         |         |            | 
 12     | 53  | KajMagnus    | kajmagnus79d@gmail.com |         |         |            | 
 12     | 54  | KajMagnus    | kajmagnus79d@gmail.com |         |         | T          | 
 3      | 56  | KajMagnus    | kajmagnus79d@gmail.com |         |         |            | 
 3      | 55  | KajMagnus    | kajmagnus79d@gmail.com |         |         | T          | N
(8 rows)

debiki_prod=> select oid_realm, tenant, sno, usr, first_name, email from dw1_ids_openid ;
         oid_realm          | tenant | sno | usr | first_name |         email          
----------------------------+--------+-----+-----+------------+------------------------
 http://*.debiki.se         | 2      | 10  | 10  | Magnus     | leomaheo@gmail.com
 http://kajmagnus.debiki.se | 12     | 331 | 53  | KajMagnus  | kajmagnus79d@gmail.com
 http://localhost:8080      | 2      | 289 | 52  | Kaj Magnus | kajmagnus79@gmail.com
 http://localhost:8080      | 2      | 273 | 30  | KajMagnus  | kajmagnus79d@gmail.com
 http://*.debiki.se         | 2      | 230 | 30  | KajMagnus  | kajmagnus79d@gmail.com
 http://*.debiki.se         | 12     | 332 | 54  | KajMagnus  | kajmagnus79d@gmail.com
 http://localhost:9003      | 3      | 345 | 56  | KajMagnus  | kajmagnus79d@gmail.com
 http://*.debiki.com        | 3      | 344 | 55  | KajMagnus  | kajmagnus79d@gmail.com
(8 rows)

debiki_prod=> commit;
COMMIT

}}}1
{{{1 2012-08-13

debiki_prod=>  alter table DW1_TENANTS add column  CREATOR_IP varchar(39);
ALTER TABLE
debiki_prod=>  alter table DW1_TENANTS add column  CREATOR_TENANT_ID varchar(32);
ALTER TABLE
debiki_prod=>  alter table DW1_TENANTS add column  CREATOR_LOGIN_ID varchar(32);
ALTER TABLE
debiki_prod=>  alter table DW1_TENANTS add column  CREATOR_ROLE_ID varchar(32);
ALTER TABLE
debiki_prod=> alter table DW1_TENANTS add
debiki_prod->   constraint DW1_TENANTS_CREATOR__R__TNTS -- ix DW1_TENANTS_CREATORROLE
debiki_prod->       foreign key (CREATOR_TENANT_ID)
debiki_prod->       references DW1_TENANTS(ID) deferrable;
ALTER TABLE
debiki_prod=> create index DW1_TENANTS_CREATORIP on DW1_TENANTS(CREATOR_IP);
CREATE INDEX
debiki_prod=> create index DW1_TENANTS_CREATORLOGIN
debiki_prod->     on DW1_TENANTS(CREATOR_TENANT_ID, CREATOR_LOGIN_ID);
CREATE INDEX
debiki_prod=> create index DW1_TENANTS_CREATORROLE
debiki_prod->     on DW1_TENANTS(CREATOR_TENANT_ID, CREATOR_ROLE_ID);
CREATE INDEX
debiki_prod=> alter table DW1_USERS add column
debiki_prod->   IS_OWNER varchar(1);
ALTER TABLE
debiki_prod=> 
debiki_prod=> alter table DW1_USERS add
debiki_prod->   constraint DW1_USERS_ISOWNER__C_B check (IS_OWNER in ('T'));
ALTER TABLE
debiki_prod=> 
debiki_prod=> alter table DW1_TENANTS
debiki_prod->   add constraint DW1_TENANTS_CREATOR__R__ROLES -- ix DW1_TENANTS_CREATORROLE
debiki_prod->     foreign key (CREATOR_TENANT_ID, CREATOR_ROLE_ID)
debiki_prod->     references DW1_USERS(TENANT, SNO) deferrable;
ALTER TABLE
debiki_prod=> create unique index DW1_IDSOID_TNT_EMAIL__U on DW1_IDS_OPENID(TENANT, EMAIL)
debiki_prod->   where OID_ENDPOINT = 'https://www.google.com/accounts/o8/ud';
ERROR:  could not create unique index "dw1_idsoid_tnt_email__u"
DETAIL:  Key (tenant, email)=(12, kajmagnus79d@gmail.com) is duplicated.
debiki_prod=>

---- Okay, I must consolidate all my own users.

{{{ Initial examination, and fix kajmagnus.debiki.se

debiki_prod=> select * from dw1_users;
 tenant | sno | display_name |         email          | country | website | superadmin | email_notfs | is_owner 
--------+-----+--------------+------------------------+---------+---------+------------+-------------+----------
 2      | 51  |              |                        |         |         | T          | R           | 
 2      | 10  | Magnus       | leomaheo@gmail.com     |         |         | T          | R           | 
 2      | 30  | KajMagnus    | kajmagnus79d@gmail.com |         |         | T          | R           | 
 2      | 52  | Kaj Magnus   | kajmagnus79@gmail.com  |         |         |            | R           | 
 12     | 53  | KajMagnus    | kajmagnus79d@gmail.com |         |         |            | R           | 
 12     | 54  | KajMagnus    | kajmagnus79d@gmail.com |         |         | T          | R           | 
 3      | 56  | KajMagnus    | kajmagnus79d@gmail.com |         |         |            | R           | 
 3      | 55  | KajMagnus    | kajmagnus79d@gmail.com |         |         | T          | R           | 
 3      | 57  | Magnus       | leomaheo@gmail.com     |         |         |            | R           | 
(9 rows)

debiki_prod=> select * from dw1_ids_openid;
 sno | tenant | usr | usr_orig |                                  oid_claimed_id                                  |                                 oid_op_local_id                                  |         oid_realm          |             oid_endpoint              |               oid_version               | first_
name |         email          | country 
-----+--------+-----+----------+----------------------------------------------------------------------------------+----------------------------------------------------------------------------------+----------------------------+---------------------------------------+-----------------------------------------+-------
-----+------------------------+---------
 10  | 2      | 10  | 10       | https://www.google.com/accounts/o8/id?id=AItOawkxwWMHh5TmZtk957ft9BsulTRcdtnkKrw | -                                                                                | http://*.debiki.se         | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | Magnus
     | leomaheo@gmail.com     | -
 230 | 2      | 30  | 30       | https://www.google.com/accounts/o8/id?id=AItOawmyWwB3fjU4pkyQJGZlicWk72n3m7tSUNU | https://www.google.com/accounts/o8/id?id=AItOawmyWwB3fjU4pkyQJGZlicWk72n3m7tSUNU | http://*.debiki.se         | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | KajMag
nus  | kajmagnus79d@gmail.com | SE
 331 | 12     | 53  | 53       | https://www.google.com/accounts/o8/id?id=AItOawmHJL0qLTl95v6kqC0E9DCxsd2slvZdIAk | https://www.google.com/accounts/o8/id?id=AItOawmHJL0qLTl95v6kqC0E9DCxsd2slvZdIAk | http://kajmagnus.debiki.se | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | KajMag
nus  | kajmagnus79d@gmail.com | SE
 289 | 2      | 52  | 52       | https://www.google.com/accounts/o8/id?id=AItOawm42Nyx5CDR1H0rEyC6nQPEImoa5Fk2qcs | -                                                                                | http://localhost:8080      | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | Kaj Ma
gnus | kajmagnus79@gmail.com  | -
 273 | 2      | 30  | 51       | https://www.google.com/accounts/o8/id?id=AItOawnWh122G7C-w3dnTqBXLt1JEjC24QUeJgQ | -                                                                                | http://localhost:8080      | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | KajMag
nus  | kajmagnus79d@gmail.com | -
 351 | 3      | 57  | 57       | https://www.google.com/accounts/o8/id?id=AItOawl4wY2saMza1QvTQ90ivu8F6_SFAtDN28I | https://www.google.com/accounts/o8/id?id=AItOawl4wY2saMza1QvTQ90ivu8F6_SFAtDN28I | http://*.debiki.com        | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | Magnus
     | leomaheo@gmail.com     | -
 344 | 3      | 55  | 55       | https://www.google.com/accounts/o8/id?id=AItOawmaz73rBkUXmMuQTbo731npDu8mCle06lw | https://www.google.com/accounts/o8/id?id=AItOawmaz73rBkUXmMuQTbo731npDu8mCle06lw | http://*.debiki.com        | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | KajMag
nus  | kajmagnus79d@gmail.com | SE
 332 | 12     | 54  | 54       | https://www.google.com/accounts/o8/id?id=AItOawmyWwB3fjU4pkyQJGZlicWk72n3m7tSUNU | https://www.google.com/accounts/o8/id?id=AItOawmyWwB3fjU4pkyQJGZlicWk72n3m7tSUNU | http://*.debiki.se         | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | KajMag
nus  | kajmagnus79d@gmail.com | SE
 345 | 3      | 56  | 56       | https://www.google.com/accounts/o8/id?id=AItOawmz-aOgKYsGm6fer6ITiIBRT_BDkSSzHgc | https://www.google.com/accounts/o8/id?id=AItOawmz-aOgKYsGm6fer6ITiIBRT_BDkSSzHgc | http://localhost:9003      | https://www.google.com/accounts/o8/ud | http://specs.openid.net/auth/2.0/server | KajMag
nus  | kajmagnus79d@gmail.com | SE
(9 rows)

debiki_prod=> select count(*), tenant, email from dw1_ids_openid group by tenant, email;
 count | tenant |         email          
-------+--------+------------------------
     1 | 3      | leomaheo@gmail.com
     2 | 2      | kajmagnus79d@gmail.com
     2 | 12     | kajmagnus79d@gmail.com
     1 | 2      | leomaheo@gmail.com
     1 | 2      | kajmagnus79@gmail.com
     2 | 3      | kajmagnus79d@gmail.com
(6 rows)

debiki_prod=> select tenant, usr, email, realm from dw1_ids_openid where tenant in ('2', '12', '3');
ERROR:  column "realm" does not exist
LINE 1: select tenant, usr, email, realm from dw1_ids_openid where t...
                                   ^
debiki_prod=> select tenant, usr, email, oid_realm from dw1_ids_openid where tenant in ('2', '12', '3');
 tenant | usr |         email          |         oid_realm          
--------+-----+------------------------+----------------------------
 2      | 10  | leomaheo@gmail.com     | http://*.debiki.se
 2      | 30  | kajmagnus79d@gmail.com | http://*.debiki.se
 12     | 53  | kajmagnus79d@gmail.com | http://kajmagnus.debiki.se
 2      | 52  | kajmagnus79@gmail.com  | http://localhost:8080
 2      | 30  | kajmagnus79d@gmail.com | http://localhost:8080
 3      | 57  | leomaheo@gmail.com     | http://*.debiki.com
 3      | 55  | kajmagnus79d@gmail.com | http://*.debiki.com
 12     | 54  | kajmagnus79d@gmail.com | http://*.debiki.se
 3      | 56  | kajmagnus79d@gmail.com | http://localhost:9003
(9 rows)

debiki_prod=> select tenant, usr, email, oid_realm from dw1_ids_openid where tenant in ('2', '12', '3') order by tenant, email;
 tenant | usr |         email          |         oid_realm          
--------+-----+------------------------+----------------------------
 12     | 54  | kajmagnus79d@gmail.com | http://*.debiki.se
 12     | 53  | kajmagnus79d@gmail.com | http://kajmagnus.debiki.se
 2      | 30  | kajmagnus79d@gmail.com | http://*.debiki.se
 2      | 30  | kajmagnus79d@gmail.com | http://localhost:8080
 2      | 52  | kajmagnus79@gmail.com  | http://localhost:8080
 2      | 10  | leomaheo@gmail.com     | http://*.debiki.se
 3      | 55  | kajmagnus79d@gmail.com | http://*.debiki.com
 3      | 56  | kajmagnus79d@gmail.com | http://localhost:9003
 3      | 57  | leomaheo@gmail.com     | http://*.debiki.com
(9 rows)

debiki_prod=> select count(*) from dw1_logins;
 count 
-------
   397
(1 row)

debiki_prod=> select sno, tenant, usr, email, oid_realm from dw1_ids_openid where tenant in ('2', '12', '3') order by tenant, email;
 sno | tenant | usr |         email          |         oid_realm          
-----+--------+-----+------------------------+----------------------------
 332 | 12     | 54  | kajmagnus79d@gmail.com | http://*.debiki.se
 331 | 12     | 53  | kajmagnus79d@gmail.com | http://kajmagnus.debiki.se
 230 | 2      | 30  | kajmagnus79d@gmail.com | http://*.debiki.se
 273 | 2      | 30  | kajmagnus79d@gmail.com | http://localhost:8080
 289 | 2      | 52  | kajmagnus79@gmail.com  | http://localhost:8080
 10  | 2      | 10  | leomaheo@gmail.com     | http://*.debiki.se
 344 | 3      | 55  | kajmagnus79d@gmail.com | http://*.debiki.com
 345 | 3      | 56  | kajmagnus79d@gmail.com | http://localhost:9003
 351 | 3      | 57  | leomaheo@gmail.com     | http://*.debiki.com
(9 rows)

debiki_prod=> 
debiki_prod=> \d dw1_logins;
            Table "debiki_prod.dw1_logins"
   Column    |            Type             | Modifiers 
-------------+-----------------------------+-----------
 sno         | character varying(32)       | not null
 tenant      | character varying(32)       | not null
 prev_login  | character varying(32)       | 
 id_type     | character varying(10)       | not null
 id_sno      | character varying(32)       | not null
 login_ip    | character varying(39)       | not null
 login_time  | timestamp without time zone | not null
 logout_ip   | character varying(39)       | 
 logout_time | timestamp without time zone | 
Indexes:
    "dw1_logins_sno__p" PRIMARY KEY, btree (sno)
    "dw1_logins_prevl" btree (prev_login)
    "dw1_logins_tnt" btree (tenant)
Check constraints:
    "dw1_logins_idtype__c" CHECK (id_type::text = ANY (ARRAY['Simple'::character varying, 'Unau'::character varying, 'OpenID'::character varying, 'EmailID'::character varying]::text[]))
    "dw1_logins_sno_not_0__c" CHECK (sno::text <> '0'::text)
Foreign-key constraints:
    "dw1_logins__r__logins" FOREIGN KEY (prev_login) REFERENCES dw1_logins(sno) DEFERRABLE
    "dw1_logins_tnt__r__tenants" FOREIGN KEY (tenant) REFERENCES dw1_tenants(id) DEFERRABLE
Referenced by:
    TABLE "dw1_ids_simple_email" CONSTRAINT "dw1_idsmpleml__r__logins" FOREIGN KEY (login) REFERENCES dw1_logins(sno)
    TABLE "dw1_logins" CONSTRAINT "dw1_logins__r__logins" FOREIGN KEY (prev_login) REFERENCES dw1_logins(sno) DEFERRABLE
    TABLE "dw1_page_actions" CONSTRAINT "dw1_pactions__r__logins" FOREIGN KEY (login) REFERENCES dw1_logins(sno) DEFERRABLE

debiki_prod=> 
debiki_prod=> select count(*), id_sno from dw1_logins where id_sno in ('332', '331') group by id_sno;
 count | id_sno 
-------+--------
     1 | 331
     3 | 332
(2 rows)

debiki_prod=> -- Remap logins from (tenant-12, kajmagnus79d@gmail.com, http://kajmagnus.debiki.se) to (tenant-12, kajmagnus79d@gmail.com, *.debiki.se):
debiki_prod=> update dw1_logins set id_sno = 332 where id_sno = 331 and tenant = '12';
ERROR:  operator does not exist: character varying = integer
LINE 1: update dw1_logins set id_sno = 332 where id_sno = 331 and te...
                                                        ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
debiki_prod=> -- Remap logins from (tenant-12, kajmagnus79d@gmail.com, http://kajmagnus.debiki.se) to (tenant-12, kajmagnus79d@gmail.com, *.debiki.se):
update dw1_logins set id_sno = '332' where id_sno = '331' and tenant = '12';
UPDATE 1
debiki_prod=> 
debiki_prod=> select count(*), id_sno from dw1_logins where id_sno in ('332', '331') group by id_sno;
 count | id_sno 
-------+--------
     4 | 332
(1 row)

debiki_prod=> delete from dw1_ids_openid where tenant = '12' and sno = '331';
DELETE 1


}}}
{{{  Tenant 2: http://localhost:8080 -> http://*.debiki.se

debiki_prod=> select count(*), id_sno from dw1_logins where id_sno in ('230', '273') group by id_sno;
 count | id_sno
-------+--------
     5 | 273
    53 | 230
(2 rows)

debiki_prod=> select count(*), id_sno from dw1_logins where id_sno in ('230', '273') and tenant = '2' group by id_sno;                                                                                                                                                                                                      
 count | id_sno                                                                                                                                                                                                                                                                                                             
-------+--------                                                                                                                                                                                                                                                                                                            
     5 | 273                                                                                                                                                                                                                                                                                                                
    53 | 230                                                                                                                                                                                                                                                                                                                
(2 rows)

debiki_prod=> update dw1_logins set id_sno = '230' where id_sno = '273' and tenant = '2'; -- http://localhost:8080 -> http://*.debiki.se
UPDATE 5
debiki_prod=> delete from dw1_ids_openid where tenant = '2' and sno = '273';
DELETE 1

}}}
{{{2 Fix tenant '3'

debiki_prod=> select count(*), id_sno from dw1_logins where id_sno in ('344', '345') and tenant = '3' group by id_sno;                                                                                                                                                                                                                  
 count | id_sno 
-------+--------
    18 | 344
     1 | 345
(2 rows)

debiki_prod=> 
debiki_prod=> 
debiki_prod=> update dw1_logins set id_sno = '344' where id_sno = '345' and tenant = '3';
UPDATE 1
debiki_prod=> delete from dw1_ids_openid where tenant = '3' and sno = '345';
DELETE 1


}}}2
{{{ Done :-) Each email now unique, per tenant, in dw1_ids_openid.
debiki_prod=> select count(*), tenant, email from dw1_ids_openid group by tenant, email;
 count | tenant |         email          
-------+--------+------------------------
     1 | 3      | leomaheo@gmail.com
     1 | 2      | kajmagnus79d@gmail.com
     1 | 12     | kajmagnus79d@gmail.com
     1 | 2      | leomaheo@gmail.com
     1 | 2      | kajmagnus79@gmail.com
     1 | 3      | kajmagnus79d@gmail.com
(6 rows)
}}}


debiki_prod=> create unique index DW1_IDSOID_TNT_EMAIL__U on DW1_IDS_OPENID(TENANT, EMAIL)
debiki_prod->   where OID_ENDPOINT = 'https://www.google.com/accounts/o8/ud';
CREATE INDEX

}}}1
{{{1 2012-09-13 Adding APPROVAL, AUTO_APPLICATION and paths CDATI, MDATI

-bash-4.1$ . scripts/psql-debiki_prod.src 
Password for user debiki_prod: 
psql (9.1.3)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.

debiki_prod=>
debiki_prod=> alter table DW1_PAGE_ACTIONS add column
debiki_prod->   APPROVAL varchar(1);
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_ACTIONS add column
debiki_prod->   AUTO_APPLICATION varchar(1);
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_APPROVAL__C_IN
debiki_prod->       check (APPROVAL in ('P', 'W', 'A', 'M'));
ALTER TABLE
debiki_prod=>
debiki_prod=> alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_TYPE_APPROVAL__C check(
debiki_prod(>       case TYPE
debiki_prod(>         when 'Aprv' then (APPROVAL is not null)
debiki_prod(>         when 'Rjct' then (APPROVAL is null)
debiki_prod(>         else true
debiki_prod(>       end);
ALTER TABLE
debiki_prod=>
debiki_prod=> alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_AUTOAPPL__C_IN
debiki_prod->       check (AUTO_APPLICATION in ('A'));
ALTER TABLE
debiki_prod=>
debiki_prod=>  alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_AUTOAPPL_TYPE__C check(
debiki_prod(>     case
debiki_prod(>       when AUTO_APPLICATION is not null then (TYPE = 'Edit')
debiki_prod(>       else true
debiki_prod(>     end);
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_APPR_AUTOAPPL__C check(
debiki_prod(>     case
debiki_prod(>       when APPROVAL is not null then (
debiki_prod(>         TYPE <> 'Edit' or AUTO_APPLICATION is not null)
debiki_prod(>       else true
debiki_prod(>     end);
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_ACTIONS drop constraint DW1_PGAS_TYPE__C_IN;
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_ACTIONS
debiki_prod->   add constraint DW1_PGAS_TYPE__C_IN check (TYPE in (
debiki_prod(>         'Post', 'Publ', 'Meta', 'Edit',
debiki_prod(>         'EditApp',
debiki_prod(>         'Aprv', 'Rjct',
debiki_prod(>         'Rating',
debiki_prod(>         'DelPost', 'DelTree',
debiki_prod(>         'FlagSpam', 'FlagIllegal', 'FlagCopyVio', 'FlagOther'));
ALTER TABLE
debiki_prod=> 
debiki_prod=> update DW1_PAGE_ACTIONS
debiki_prod->   set APPROVAL = 'W' where TYPE in ('Post', 'EditApp');
UPDATE 917
debiki_prod=> 
debiki_prod=> alter table DW1_PAGE_PATHS add column
debiki_prod->   CDATI timestamp not null default now();
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_PATHS add column
debiki_prod->   MDATI timestamp not null default now();
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_PATHS add constraint DW1_PGPTHS_CDATI_MDATI__C_LE check (CDATI <= MDATI);
ALTER TABLE
debiki_prod=> 
debiki_prod=> update DW1_PAGE_PATHS p set cdati =
debiki_prod->   (select min(a.time) from DW1_PAGE_ACTIONS a
debiki_prod(>   where p.tenant = a.tenant
debiki_prod(>     and p.page_id = a.page_id);
UPDATE 68
debiki_prod=> update DW1_PAGE_PATHS p set mdati = cdati;
UPDATE 68
debiki_prod=>

}}}1
{{{1 2012-11-06 Page role and parent id columns

[ec2-user@dw0azewdbpv11danny ~]$ sudo su - postgres
-bash-4.1$ . scripts/psql-debiki_prod.src
Password for user debiki_prod:
psql (9.1.3)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.

debiki_prod=>
debiki_prod=> alter table DW1_PAGES add column
debiki_prod->   PAGE_ROLE varchar(10);
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  PARENT_PAGE_ID varchar(32);
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
debiki_prod->   CDATI timestamp not null default now();
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  MDATI timestamp not null default now();
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  PUBL_DATI timestamp default now();
ALTER TABLE
debiki_prod=>
debiki_prod=> alter table DW1_PAGES add
debiki_prod->   constraint DW1_PAGES_PARENTPAGE__R__PAGES -- ix: DW1_PAGES_TNT_PARENTPAGE
debiki_prod->       foreign key (TENANT, PARENT_PAGE_ID)
debiki_prod->       references DW1_PAGES(TENANT, GUID) deferrable;
ALTER TABLE
debiki_prod=>
debiki_prod=> alter table DW1_PAGES add
debiki_prod->   constraint DW1_PAGES_PAGEROLE__C_IN
debiki_prod->       check (PAGE_ROLE in ('HP', 'BMP', 'BA', 'FMP', 'FT', 'WMP', 'WP'));
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add
debiki_prod->   constraint DW1_PAGES_CDATI_MDATI__C_LE check (CDATI <= MDATI);
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add constraint DW1_PAGES_CDATI_PUBLDATI__C_LE check (CDATI <= PUBL_DATI);
ALTER TABLE
debiki_prod=> update DW1_PAGES g
debiki_prod->   set CDATI = t.CDATI,
debiki_prod->       MDATI = t.MDATI,
debiki_prod->       PUBL_DATI = t.CDATI
debiki_prod->   from DW1_PAGE_PATHS t
debiki_prod->   where t.PAGE_ID = g.GUID and t.TENANT = g.TENANT;
UPDATE 85
debiki_prod=>
debiki_prod=> create index DW1_PAGES_TNT_PARENTPAGE
debiki_prod->     on DW1_PAGES (TENANT, PARENT_PAGE_ID);
CREATE INDEX
debiki_prod=> create index DW1_PAGES_TNT_PARENT_PUBLDATI
debiki_prod->     on DW1_PAGES (TENANT, PARENT_PAGE_ID, PUBL_DATI);
CREATE INDEX
debiki_prod=> create index DW1_PAGES_TNT_PRNT_CDATI_NOPUB
debiki_prod->     on DW1_PAGES (TENANT, PARENT_PAGE_ID, CDATI)
debiki_prod->     where PUBL_DATI is null;
CREATE INDEX
debiki_prod=>
debiki_prod=> alter table DW1_IDS_OPENID add column
debiki_prod->   CDATI timestamp not null default now();
ALTER TABLE
debiki_prod=> commit;
WARNING:  there is no transaction in progress
COMMIT
debiki_prod=> \q

}}}1
{{{1 2012-12-12 Move columns from DW1_PAGE_PATHS to DW1_PAGES

drop view dw1v_pages; -- if any (it depends on PAGE_STATUS)

alter table DW1_PAGE_PATHS drop column PAGE_STATUS;
alter table DW1_PAGE_PATHS drop column CACHED_TITLE;
alter table DW1_PAGE_PATHS drop column CACHED_PUBL_TIME;
alter table DW1_PAGE_PATHS drop column CACHED_SGFNT_MTIME;

alter table DW1_PAGES add column CACHED_TITLE varchar(100) default null;

alter table DW1_PAGES add column
   SGFNT_MDATI timestamp default null;

alter table DW1_PAGES add
   constraint DW1_PAGES_CACHEDTITLE__C_NE check (trim(CACHED_TITLE) <> '');

alter table DW1_PAGES add
  constraint DW1_PAGES_CDATI_SMDATI__C_LE check (CDATI <= SGFNT_MDATI);

}}}1
{{{1 2012-12-12 Canonical paths

{{{ Done @ test
debiki=> alter table DW1_PAGE_PATHS add column CANONICAL varchar(1);
ALTER TABLE
debiki=> update DW1_PAGE_PATHS set CANONICAL = 'C';
UPDATE 0
debiki=> alter table DW1_PAGE_PATHS alter column CANONICAL not null;
ERROR:  syntax error at or near "not"
LINE 1: alter table DW1_PAGE_PATHS alter column CANONICAL not null;
                                                          ^
debiki=> alter table DW1_PAGE_PATHS alter column CANONICAL set not null;
ALTER TABLE
debiki=>
debiki=> alter table DW1_PAGE_PATHS rename column MDATI to CANONICAL_DATI;
ALTER TABLE
debiki=> alter table DW1_PAGE_PATHS drop constraint DW1_PGPTHS_TNT_PGID__P;
ERROR:  cannot drop constraint dw1_pgpths_tnt_pgid__p on table dw1_page_paths because other objects depend on it
DETAIL:  constraint dw1_pgas_tnt_pgid__r__pgpths on table dw1_page_actions depends on index dw1_pgpths_tnt_pgid__p
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
debiki=>
debiki=> alter table DW1_PAGE_ACTIONS drop constraint DW1_PGAS_TNT_PGID__R__PGPTHS;
ALTER TABLE
debiki=>
debiki=> alter table DW1_PAGE_ACTIONS add constraint DW1_PGAS_TNT_PGID__R__PAGES
debiki->      foreign key (TENANT, PAGE_ID)
debiki->      references DW1_PAGES (TENANT, PAGE_ID) deferrable;
ERROR:  column "page_id" referenced in foreign key constraint does not exist
debiki=>
debiki=> alter table DW1_PAGE_ACTIONS add constraint DW1_PGAS_TNT_PGID__R__PAGES
debiki->      foreign key (TENANT, PAGE_ID)
debiki->      references DW1_PAGES (TENANT, GUID) deferrable;
ALTER TABLE
debiki=> alter table DW1_PAGE_PATHS drop constraint DW1_PGPTHS_TNT_PGID__P;
ALTER TABLE
debiki=> create index DW1_PGPTHS_TNT_PGID_CNCL
debiki->     on DW1_PAGE_PATHS (TENANT, PAGE_ID, CANONICAL);
CREATE INDEX
debiki=> create unique index DW1_PGPTHS_TNT_PGID_CNCL__U
debiki->     on DW1_PAGE_PATHS (TENANT, PAGE_ID, CANONICAL)
debiki-> ^C
debiki=>
debiki=>
debiki=> create unique index DW1_PGPTHS_TNT_PGID_CNCL__U
debiki->     on DW1_PAGE_PATHS (TENANT, PAGE_ID)
debiki->     where CANONICAL = 'C';
CREATE INDEX
debiki=> drop index DW1_PGPTHS__U;
DROP INDEX
debiki=>
debiki=> create unique index DW1_PGPTHS_PATH_NOID_CNCL__U
debiki->     on DW1_PAGE_PATHS(TENANT, PARENT_FOLDER, PAGE_SLUG)
debiki->     where SHOW_ID = 'F' and CANONICAL = 'C';
CREATE INDEX
debiki=>
debiki=> drop index DW1_PGPTHS_ALL;
DROP INDEX
debiki=>
debiki=> create index DW1_PGPTHS_TNT_FLDR_SLG_CNCL
debiki->     on DW1_PAGE_PATHS(TENANT, PARENT_FOLDER, PAGE_SLUG, CANONICAL);
CREATE INDEX
debiki=> alter table DW1_PAGE_PATHS add
debiki->   constraint DW1_PGPTHS_CNCL__C check (CANONICAL in ('C', 'R'));
ALTER TABLE
debiki=>
debiki=> create unique index DW1_PGPTHS_PATH_NOCNCL__U
debiki->     on DW1_PAGE_PATHS(TENANT, PAGE_ID, PARENT_FOLDER, PAGE_SLUG, SHOW_ID)
debiki->     where CANONICAL <> 'C';
CREATE INDEX
debiki=>
}}}

alter table DW1_PAGE_ACTIONS add constraint DW1_PGAS_TNT_PGID__R__PAGES
    foreign key (TENANT, PAGE_ID)
    references DW1_PAGES (TENANT, GUID) deferrable;
alter table DW1_PAGE_ACTIONS drop constraint DW1_PGAS_TNT_PGID__R__PGPTHS;

alter table DW1_PAGE_PATHS add column CANONICAL varchar(1);
update DW1_PAGE_PATHS set CANONICAL = 'C';
alter table DW1_PAGE_PATHS alter column CANONICAL set not null;
alter table DW1_PAGE_PATHS rename column MDATI to CANONICAL_DATI;

alter table DW1_PAGE_PATHS drop constraint DW1_PGPTHS_TNT_PGID__P;

create index DW1_PGPTHS_TNT_PGID_CNCL
     on DW1_PAGE_PATHS (TENANT, PAGE_ID, CANONICAL);

create unique index DW1_PGPTHS_TNT_PGID_CNCL__U
     on DW1_PAGE_PATHS (TENANT, PAGE_ID)
     where CANONICAL = 'C';

create unique index DW1_PGPTHS_PATH__U
    on DW1_PAGE_PATHS (TENANT, PAGE_ID, PARENT_FOLDER, PAGE_SLUG, SHOW_ID);

drop index DW1_PGPTHS__U;
create unique index DW1_PGPTHS_PATH_NOID_CNCL__U
     on DW1_PAGE_PATHS(TENANT, PARENT_FOLDER, PAGE_SLUG)
     where SHOW_ID = 'F' and CANONICAL = 'C';

drop index DW1_PGPTHS_ALL;
create index DW1_PGPTHS_TNT_FLDR_SLG_CNCL
     on DW1_PAGE_PATHS(TENANT, PARENT_FOLDER, PAGE_SLUG, CANONICAL);

alter table DW1_PAGE_PATHS add
   constraint DW1_PGPTHS_CNCL__C check (CANONICAL in ('C', 'R'));

}}}1
{{{ 2012-12-12 Change '.page' to '_page'

\set AUTOCOMMIT 'off'
select page_slug, '_' || substr(page_slug, 2) from dw1_page_paths where page_slug like '.%';
update dw1_page_paths set page_slug = '_' || substr(page_slug, 2) where page_slug like '.%';
select page_slug, '_' || substr(page_slug, 2) from dw1_page_paths where page_slug like '\_%';
select page_slug, '_' || substr(page_slug, 2) from dw1_page_paths where page_slug like '.%';
commit;

}}}
{{{ 2012-12-12 Allow NULL login in DW1_PAGE_ACTIONS

alter table DW1_PAGE_ACTIONS alter column LOGIN drop not null;

}}}
{{{ 2013-01-10 Add & change PAGE_ROLE:s

02:55:40 46 ~/me-dev/debiki/all/debiki-app-play-2.1[master*]$ s/psql-debiki_prod-tunnel.sh
+ psql -h 127.0.0.1 -p 55432 debiki_prod debiki_prod
Password for user debiki_prod:
psql (9.1.7, server 9.1.3)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.

debiki_prod=>
debiki_prod=> alter table DW1_PAGES drop constraint DW1_PAGES_PAGEROLE__C_IN;
ALTER TABLE
debiki_prod=> select count(*), PAGE_ROLE from DW1_PAGES group by PAGE_ROLE;
 count | page_role
-------+-----------
    87 |
     1 | BMP
     2 | BA
(3 rows)

debiki_prod=> select guid, parent_page_id, PAGE_ROLE from DW1_PAGES where page_role is not null;
 guid  | parent_page_id | page_role
-------+----------------+-----------
 81504 |                | BMP
 6zju6 | 81504          | BA
 3qg82 | 81504          | BA
(3 rows)

debiki_prod=> update DW1_PAGES set PAGE_ROLE = 'G' where PAGE_ROLE is null;
UPDATE 87
debiki_prod=> select count(*), PAGE_ROLE from DW1_PAGES group by PAGE_ROLE;
 count | page_role
-------+-----------
     1 | BMP
    87 | G
     2 | BA
(3 rows)

debiki_prod=> update DW1_PAGES set PAGE_ROLE = 'G' where PAGE_ROLE = 'HP';
UPDATE 0
debiki_prod=> update DW1_PAGES set PAGE_ROLE = 'B' where PAGE_ROLE = 'BMP';
UPDATE 1
debiki_prod=> update DW1_PAGES set PAGE_ROLE = 'F' where PAGE_ROLE = 'FMP';
UPDATE 0
debiki_prod=> \set AUTOCOMMIT 'off'
debiki_prod=> \set
AUTOCOMMIT = 'off'
PROMPT1 = '%/%R%# '
PROMPT2 = '%/%R%# '
PROMPT3 = '>> '
VERBOSITY = 'default'
VERSION = 'PostgreSQL 9.1.7 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3, 64-bit'
DBNAME = 'debiki_prod'
USER = 'debiki_prod'
HOST = '127.0.0.1'
PORT = '55432'
ENCODING = 'UTF8'
LASTOID = '0'
debiki_prod=> update DW1_PAGES set PAGE_ROLE = 'BP' where PAGE_ROLE = 'BA';
UPDATE 2
debiki_prod=> select count(*), PAGE_ROLE from DW1_PAGES group by PAGE_ROLE;
 count | page_role
-------+-----------
     1 | B
    87 | G
     2 | BP
(3 rows)

debiki_prod=> alter table DW1_PAGES add constraint DW1_PAGES_PAGEROLE__C_IN
debiki_prod->       check (PAGE_ROLE in ('G', 'B', 'BP', 'FG', 'F', 'FT', 'W', 'WP', 'C'));
ALTER TABLE
debiki_prod=> alter table DW1_PAGES alter column PAGE_ROLE set not null;
ALTER TABLE
debiki_prod=> commit;
COMMIT
debiki_prod=>
debiki_prod=>
debiki_prod=> update dw1_pages g
debiki_prod-> set page_role = 'C'
debiki_prod-> from dw1_page_paths t
debiki_prod-> where g.tenant = t.tenant and g.guid = t.page_id and (
debiki_prod(>   t.page_slug like '%.css' or
debiki_prod(>   t.page_slug like '%.js' or
debiki_prod(>   t.page_slug like '%.yaml' or
debiki_prod(>   t.page_slug like '%.conf' or
debiki_prod(>   t.page_slug like '%.template');
UPDATE 20
debiki_prod=> select * from dw1_pages where page_role = 'C';
 sno | tenant |    guid    | page_role | parent_page_id |           cdati            |           mdati            |         publ_dati          |    cached_title    | sgfnt_mdati
-----+--------+------------+-----------+----------------+----------------------------+----------------------------+----------------------------+--------------------+-------------
 50  | 2      | 11bxs13umh | C         |                | 2011-10-11 19:24:06.599    | 2011-10-11 19:24:06.599    | 2011-10-11 19:24:06.599    |                    |
 51  | 2      | 15px2pwjyn | C         |                | 2011-10-11 19:27:39.328    | 2011-10-11 19:27:39.328    | 2011-10-11 19:27:39.328    |                    |
 90  | 2      | 1h5ckk842q | C         |                | 2011-10-15 19:38:36.569    | 2011-10-15 19:38:36.569    | 2011-10-15 19:38:36.569    |                    |
 53  | 2      | 57xb9tn1t4 | C         |                | 2011-10-11 19:35:35.77     | 2011-10-11 19:35:35.77     | 2011-10-11 19:35:35.77     |                    |
 192 | 2      | hhlqpx3ur2 | C         |                | 2012-02-05 14:58:17.556    | 2012-02-05 14:58:17.556    | 2012-02-05 14:58:17.556    |                    |
 193 | 2      | 1kw4zumc43 | C         |                | 2012-02-12 10:48:33.803    | 2012-02-12 10:48:33.803    | 2012-02-12 10:48:33.803    |                    |
 202 | 12     | 0nn45      | C         |                | 2012-04-07 06:56:17.347    | 2012-04-07 06:56:17.347    | 2012-04-07 06:56:17.347    |                    |
 203 | 12     | 2mvh6      | C         |                | 2012-04-07 07:19:20.733    | 2012-04-07 07:19:20.733    | 2012-04-07 07:19:20.733    |                    |
 212 | 3      | 61f28      | C         |                | 2012-04-21 08:05:13.224    | 2012-04-21 08:05:13.224    | 2012-04-21 08:05:13.224    |                    |
 216 | 3      | 2fur2      | C         |                | 2012-04-22 19:48:57.69     | 2012-04-22 19:48:57.69     | 2012-04-22 19:48:57.69     |                    |
 217 | 3      | 115j2      | C         |                | 2012-04-22 22:23:58.63     | 2012-04-22 22:23:58.63     | 2012-04-22 22:23:58.63     |                    |
 230 | 11     | 51cb7      | C         |                | 2012-09-15 17:18:13.917672 | 2012-09-15 17:18:13.917672 | 2012-09-15 17:18:13.917672 |                    |
 237 | 3      | 5clt1      | C         |                | 2012-10-09 13:00:09.762611 | 2012-10-09 13:00:41.10513  | 2012-10-09 13:00:09.762611 |                    |
 241 | 3      | 8ryn0      | C         |                | 2012-10-13 06:44:06.847799 | 2012-10-13 06:44:13.256386 | 2012-10-13 06:44:06.847799 |                    |
 245 | 3      | 8yk05      | C         |                | 2012-11-06 14:50:08.685439 | 2012-12-16 16:13:18.472    | 2012-11-06 14:50:08.685439 |                    |
 231 | 11     | 414f7      | C         |                | 2012-09-15 17:50:30.966094 | 2012-12-17 09:10:30.219    | 2012-09-15 17:50:30.966094 | site.css           |
 246 | 11     | 0fmq7      | C         |                | 2012-12-17 08:58:52.812    | 2012-12-30 06:15:36.579    |                            |                    |
 224 | 2      | 7l6y2      | C         |                | 2012-05-05 06:16:17.624    | 2012-12-30 06:06:32.132    | 2012-05-05 06:16:17.624    | debiki.se CSS      |
 213 | 3      | 514r5      | C         |                | 2012-04-21 18:50:37.315    | 2012-12-21 06:19:08.287    | 2012-04-21 18:50:37.315    | www.debiki.com CSS |
 247 | 2      | 7p2v0      | C         |                | 2012-12-17 13:13:00.651    | 2012-12-30 06:07:34.556    |                            |                    |
(20 rows)

debiki_prod=> select count(*), PAGE_ROLE from DW1_PAGES group by PAGE_ROLE;
 count | page_role
-------+-----------
     1 | B
    67 | G
     2 | BP
    20 | C
(4 rows)

debiki_prod=> select guid, parent_page_id, PAGE_ROLE from DW1_PAGES where page_role not in ('G', 'C');
 guid  | parent_page_id | page_role
-------+----------------+-----------
 81504 |                | B
 6zju6 | 81504          | BP
 3qg82 | 81504          | BP
(3 rows)

debiki_prod=> commit;
COMMIT
debiki_prod=> \d dw1_pages;
                         Table "debiki_prod.dw1_pages"
     Column     |            Type             |            Modifiers
----------------+-----------------------------+---------------------------------
 sno            | character varying(32)       | not null
 tenant         | character varying(32)       | not null
 guid           | character varying(32)       | not null
 page_role      | character varying(10)       | not null
 parent_page_id | character varying(32)       |
 cdati          | timestamp without time zone | not null default now()
 mdati          | timestamp without time zone | not null default now()
 publ_dati      | timestamp without time zone | default now()
 cached_title   | character varying(100)      | default NULL::character varying
 sgfnt_mdati    | timestamp without time zone |
Indexes:
    "dw1_pages_sno__p" PRIMARY KEY, btree (sno)
    "dw1_pages__u" UNIQUE CONSTRAINT, btree (tenant, guid)
    "dw1_pages_tnt_parent_publdati" btree (tenant, parent_page_id, publ_dati)
    "dw1_pages_tnt_parentpage" btree (tenant, parent_page_id)
    "dw1_pages_tnt_prnt_cdati_nopub" btree (tenant, parent_page_id, cdati) WHERE publ_dati IS NULL
Check constraints:
    "dw1_pages_cachedtitle__c_ne" CHECK (btrim(cached_title::text) <> ''::text)
    "dw1_pages_cdati_mdati__c_le" CHECK (cdati <= mdati)
    "dw1_pages_cdati_publdati__c_le" CHECK (cdati <= publ_dati)
    "dw1_pages_cdati_smdati__c_le" CHECK (cdati <= sgfnt_mdati)
    "dw1_pages_pagerole__c_in" CHECK (page_role::text = ANY (ARRAY['G'::character varying, 'B'::character varying, 'BP'::character varying, 'FG'::character varying, 'F'::character varying, 'FT'::character varying, 'W'::character varying, 'WP'::character varying, 'C'::character varying]::text[]))
    "dw1_pages_sno_not_0__c" CHECK (sno::text <> '0'::text)
Foreign-key constraints:
    "dw1_pages__r__tenant" FOREIGN KEY (tenant) REFERENCES dw1_tenants(id) DEFERRABLE
    "dw1_pages_parentpage__r__pages" FOREIGN KEY (tenant, parent_page_id) REFERENCES dw1_pages(tenant, guid) DEFERRABLE
Referenced by:
    TABLE "dw1_page_actions" CONSTRAINT "dw1_pactions__r__pages" FOREIGN KEY (page) REFERENCES dw1_pages(sno) DEFERRABLE
    TABLE "dw1_pages" CONSTRAINT "dw1_pages_parentpage__r__pages" FOREIGN KEY (tenant, parent_page_id) REFERENCES dw1_pages(tenant, guid) DEFERRABLE
    TABLE "dw1_paths" CONSTRAINT "dw1_paths_tnt_page__r__pages" FOREIGN KEY (tenant, page_guid) REFERENCES dw1_pages(tenant, guid) DEFERRABLE
    TABLE "dw1_page_actions" CONSTRAINT "dw1_pgas_tnt_pgid__r__pages" FOREIGN KEY (tenant, page_id) REFERENCES dw1_pages(tenant, guid) DEFERRABLE
    TABLE "dw1_page_paths" CONSTRAINT "dw1_pgpths_tnt_pgid__r__pages" FOREIGN KEY (tenant, page_id) REFERENCES dw1_pages(tenant, guid) DEFERRABLE

debiki_prod=> \q
03:05:17 47 ~/me-dev/debiki/all/debiki-app-play-2.1[master*]$
03:05:18 47 ~/me-dev/debiki/all/debiki-app-play-2.1[master*]$ date
Sun Feb 10 03:05:19 CET 2013

}}}
{{{ 2013-03-01 Change ids to 0t, 0b, 0c

15:19:35 1 ~/me-dev/debiki/all/debiki-app-play-2.1[master]$ s/psql-debiki_prod-tunnel.sh 
+ psql -h 127.0.0.1 -p 55432 debiki_prod debiki_prod
Password for user debiki_prod: 
psql (9.1.8, server 9.1.3)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.

debiki_prod=> 
debiki_prod=> 
debiki_prod=> alter table DW1_PAGES add column
debiki_prod->   NEXT_REPLY_ID int default 1 not null;
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
debiki_prod->   CACHED_AUTHOR_DISPLAY_NAME varchar(100);
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  CACHED_AUTHOR_USER_ID varchar(32);
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  CACHED_NUM_POSTERS int not null default 0;
ALTER TABLE
debiki_prod=> select distinct CACHED_NUM_POSTERS from dw1_pages;
 cached_num_posters 
--------------------
                  0
(1 row)

debiki_prod=> alter table DW1_PAGES add column
  CACHED_NUM_ACTIONS int not null default 0;
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  CACHED_NUM_POSTS_TO_REVIEW int not null default 0;
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  CACHED_NUM_POSTS_DELETED int not null default 0;
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  CACHED_NUM_REPLIES_VISIBLE int not null default 0;
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  CACHED_LAST_VISIBLE_POST_DATI timestamp default null;
ALTER TABLE
debiki_prod=> alter table DW1_PAGES add column
  CACHED_NUM_CHILD_PAGES int not null default 0;
ALTER TABLE
debiki_prod=>
debiki_prod=> create or replace function INC_NEXT_PER_PAGE_REPLY_ID(
debiki_prod(>   site_id varchar(32), page_id varchar(32), step int) returns int as $$
debiki_prod$> declare
debiki_prod$>   next_id int;
debiki_prod$> begin
debiki_prod$>   update DW1_PAGES
debiki_prod$>     set NEXT_REPLY_ID = NEXT_REPLY_ID + step
debiki_prod$>     where TENANT = site_id and GUID = page_id
debiki_prod$>     returning NEXT_REPLY_ID into next_id;
debiki_prod$>   return next_id;
debiki_prod$> end;
debiki_prod$> $$ language plpgsql;
CREATE FUNCTION
debiki_prod=> update DW1_PAGES p
debiki_prod-> set CACHED_NUM_CHILD_PAGES = (select count(*) from DW1_PAGES c where c.PARENT_PAGE_ID = p.GUID and c.TENANT = p.TENANT);
UPDATE 103
debiki_prod=>
debiki_prod=> --------
debiki_prod=>
debiki_prod=> alter table DW1_PAGE_ACTIONS drop constraint DW1_PACTIONS_ROOT_IS_1__C;
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_MAGIC_ID_PARENTS__C
debiki_prod->       check (RELPA = case
debiki_prod(>       when PAID = '0t' then '0t'
debiki_prod(>       when PAID = '0b' then '0b'
debiki_prod(>       when PAID = '0c' then '0c'
debiki_prod(>       else RELPA end);
ALTER TABLE
debiki_prod=>
debiki_prod=> alter table DW1_PAGE_ACTIONS drop constraint DW1_PACTIONS_ROOT_IS_POST__C;
ALTER TABLE
debiki_prod=> alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_MAGIC_ID_TYPES__C
debiki_prod->       check (TYPE = case when PAID in ('0t', '0b', '0c') then 'Post' else TYPE end);
ALTER TABLE
debiki_prod=>
debiki_prod=> ------
debiki_prod=>
debiki_prod=> \set AUTOCOMMIT 'off'
debiki_prod=>
debiki_prod=> SET CONSTRAINTS ALL DEFERRED
debiki_prod->
debiki_prod-> ;
SET CONSTRAINTS
debiki_prod=>
debiki_prod=> update DW1_PAGE_RATINGS
debiki_prod-> set PAID = case PAID when '2' then '0t' when '1' then '0b' when '3' then '0c' end
debiki_prod-> where PAID in ('1', '2', '3');
UPDATE 0
debiki_prod=>
debiki_prod=> update DW1_PAGE_ACTIONS set
debiki_prod->   PAID = case PAID when '2' then '0t' when '1' then '0b' when '3' then '0c' else PAID end,
debiki_prod->   RELPA = case RELPA when '2' then '0t' when '1' then '0b' when '3' then '0c' else RELPA end
debiki_prod-> where PAID in ('1', '2', '3') or RELPA in ('1', '2', '3');
ERROR:  new row for relation "dw1_page_actions" violates check constraint "dw1_pgas_paid_relpa__c_eq"
debiki_prod=> 
debiki_prod=> 
debiki_prod=> rollback;
ROLLBACK
debiki_prod=> alter table DW1_PAGE_ACTIONS drop constraint DW1_PGAS_PAID_RELPA__C_EQ;
ALTER TABLE
debiki_prod=> 
debiki_prod=> commit;
COMMIT
debiki_prod=> 
debiki_prod=> update DW1_PAGE_ACTIONS set
debiki_prod->   PAID = case PAID when '2' then '0t' when '1' then '0b' when '3' then '0c' else PAID end,
debiki_prod->   RELPA = case RELPA when '2' then '0t' when '1' then '0b' when '3' then '0c' else RELPA end
debiki_prod-> where PAID in ('1', '2', '3') or RELPA in ('1', '2', '3');
UPDATE 1197
debiki_prod=> 
debiki_prod=> select * from dw1_page_actions where page_id = '4xsq1';
debiki_prod=> 
debiki_prod=> commit;
COMMIT
debiki_prod=> \q


And also:
alter table dw1_page_actions drop constraint DW1_PGAS_TYPE__C_IS_POST;

}}}
{{{ 2013-03-06 Add CollapsePost etc action types

$ s/psql-debiki_prod-tunnel.sh 
+ psql -h 127.0.0.1 -p 55432 debiki_prod debiki_prod
Password for user debiki_prod: 
psql (9.1.8, server 9.1.3)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.

debiki_prod=> 
debiki_prod=> alter table DW1_PAGE_ACTIONS drop constraint DW1_PGAS_TYPE__C_IN;
ALTER TABLE
debiki_prod=> 
debiki_prod=> alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_TYPE__C_IN check (TYPE in (
debiki_prod(>         'Post', 'Edit', 'EditApp',
debiki_prod(>         'Aprv', 'Rjct',
debiki_prod(>         'Rating',
debiki_prod(>         'MoveTree',
debiki_prod(>         'CloseTree', 'CollapsePost', 'CollapseTree', 'CollapseReplies',
debiki_prod(>         'DelPost', 'DelTree',
debiki_prod(>         'FlagSpam', 'FlagIllegal', 'FlagCopyVio', 'FlagOther',
debiki_prod(>         'Undo'));
ERROR:  check constraint "dw1_pgas_type__c_in" is violated by some row
debiki_prod=> 
debiki_prod=> select distinct type from dw1_page_actions ;
    type     
-------------
 DelPost
 Aprv
 Meta
 Post
 FlagSpam
 FlagCopyVio
 FlagIllegal
 Edit
 FlagOther
 EditApp
 Rating
 DelTree
 Rjct
(13 rows)

debiki_prod=> select * from dw1_page_actions  where type = 'Meta';
 page |    paid    | login |          time           | type |   relpa    |       text        | markup | wheere | new_ip | tenant |  page_id   | approval | auto_application 
------+------------+-------+-------------------------+------+------------+-------------------+--------+--------+--------+--------+------------+----------+------------------
 134  | 4z1ng46wp0 | 370   | 2011-11-14 07:42:48.416 | Meta | 186cf91nv2 | fixed-position: 2 |        |        |        | 2      | gt098frb2y |          | 
 110  | mpcz64d0vd | 270   | 2011-11-06 16:37:31.837 | Meta | 19l08rg22p | article-question  |        |        |        | 2      | uhwg7g7pb5 |          | 
 134  | 1lbmcw5ur3 | 370   | 2011-11-14 07:42:57.317 | Meta | u6psx85l13 | fixed-position: 3 |        |        |        | 2      | gt098frb2y |          | 
 110  | 12u0mdtnkc | 270   | 2011-11-06 16:37:36.918 | Meta | 18xk3v3k75 | article-question  |        |        |        | 2      | uhwg7g7pb5 |          | 
 110  | lu5qr2m6dh | 270   | 2011-11-06 16:37:41.774 | Meta | 14kdx06288 | article-question  |        |        |        | 2      | uhwg7g7pb5 |          | 
 134  | skgcc8tnun | 370   | 2011-11-14 07:42:40.521 | Meta | 1j4ujz52hg | fixed-position: 1 |        |        |        | 2      | gt098frb2y |          | 
(6 rows)

debiki_prod=> 
debiki_prod=> -- update dw1_page_actions set type = 'Post'  where type = 'Meta';
debiki_prod=> 
debiki_prod=> ;
debiki_prod=> \set AUTOCOMMIT 'off'
debiki_prod=> \set
AUTOCOMMIT = 'off'
PROMPT1 = '%/%R%# '
PROMPT2 = '%/%R%# '
PROMPT3 = '>> '
VERBOSITY = 'default'
VERSION = 'PostgreSQL 9.1.8 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3, 64-bit'
DBNAME = 'debiki_prod'
USER = 'debiki_prod'
HOST = '127.0.0.1'
PORT = '55432'
ENCODING = 'UTF8'
LASTOID = '0'
debiki_prod=> update dw1_page_actions set type = 'Post'  where type = 'Meta';
ERROR:  new row for relation "dw1_page_actions" violates check constraint "dw1_pgas_post_markup__c_nn"
debiki_prod=> 
debiki_prod=> select distinct markup from dw1_page_actions;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
debiki_prod=> rollback;
ROLLBACK
debiki_prod=> select distinct markup from dw1_page_actions;
 markup 
--------
 
 code
 para
 dmd0
 html
(5 rows)

debiki_prod=> 
debiki_prod=> update dw1_page_actions set type = 'Post', markup = 'code'  where type = 'Meta';
UPDATE 6
debiki_prod=> select * from dw1_page_actions  where type = 'Meta';
 page | paid | login | time | type | relpa | text | markup | wheere | new_ip | tenant | page_id | approval | auto_application 
------+------+-------+------+------+-------+------+--------+--------+--------+--------+---------+----------+------------------
(0 rows)

debiki_prod=> commit;
COMMIT
debiki_prod=> 
debiki_prod=> alter table DW1_PAGE_ACTIONS add
debiki_prod->   constraint DW1_PGAS_TYPE__C_IN check (TYPE in (
debiki_prod(>         'Post', 'Edit', 'EditApp',
debiki_prod(>         'Aprv', 'Rjct',
debiki_prod(>         'Rating',
debiki_prod(>         'MoveTree',
debiki_prod(>         'CloseTree', 'CollapsePost', 'CollapseTree', 'CollapseReplies',
debiki_prod(>         'DelPost', 'DelTree',
debiki_prod(>         'FlagSpam', 'FlagIllegal', 'FlagCopyVio', 'FlagOther',
debiki_prod(>         'Undo'));
ALTER TABLE
debiki_prod=> commit;
COMMIT

}}}

